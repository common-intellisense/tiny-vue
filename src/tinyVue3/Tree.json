{
  "name": "TinyTree",
  "tag": "树形控件",
  "props": {
    "accordion": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether it is accordion mode or not, only one sibling tree node is opened at a time",
      "description_zh": "是否为手风琴模式，每次只打开一个同级树节点展开"
    },
    "add-disabled-keys": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "The list of node key values that are not allowed to be added can also be set using the setAddDisabledKeys method",
      "description_zh": "禁止添加的节点 key 值列表，也可通过 setAddDisabledKeys 方法设置"
    },
    "after-load": {
      "default": "--",
      "value": "",
      "type": "(nodes: object[])=> void",
      "description": "The callback function after the data of the subordinate tree node is loaded",
      "description_zh": "下级树节点数据加载完毕后的回调函数"
    },
    "allow-drag": {
      "default": "--",
      "value": "",
      "type": "(node)=>boolean",
      "description": "Determine whether the node can be dragged or not",
      "description_zh": "判断节点能否被拖拽"
    },
    "allow-drop": {
      "default": "--",
      "value": "",
      "type": "(srcNode, targetNode, type)=>void",
      "description": "Determines whether the target node can be placed when dragging. There are three types of parameters: 'prev', 'inner', and 'next', which represent placement before, insertion, and post-target nodes, respectively",
      "description_zh": "拖拽时判定目标节点能否被放置。type 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后"
    },
    "check-on-click-node": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "When you click a node, the node is automatically selected",
      "description_zh": "是否点击节点时，自动勾选节点"
    },
    "check-strictly": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether it is a parent-child strict mode",
      "description_zh": "是否为父子严格模式"
    },
    "current-node-key": {
      "default": "--",
      "value": "",
      "type": "string",
      "description": "The node is currently selected",
      "description_zh": "当前选中节点"
    },
    ":data": {
      "default": "--",
      "value": "",
      "type": "Array",
      "description": "Set the data source, and display the data through the label and children attributes of the data item by default",
      "description_zh": "设置数据源, 默认通过数据项的 label , children 属性展示数据",
      "required": true
    },
    "default-checked-keys": {
      "default": "--",
      "value": "",
      "type": "string[]",
      "description": "The keys of the node that are selected by default",
      "description_zh": "默认勾选的节点的keys"
    },
    "default-expand-all": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether to expand all nodes by default",
      "description_zh": "是否默认展开所有节点"
    },
    "default-expanded-keys": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "By default, the keys of the expansion node are expanded",
      "description_zh": "默认展开节点的keys"
    },
    "delete-disabled-keys": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "The list of node key values that are prohibited from being deleted can also be set by the setDeleteDisabledKeys method",
      "description_zh": "禁止删除的节点 key 值列表，也可通过 setDeleteDisabledKeys 方法设置"
    },
    "delete-node-method": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "If the device hook function of the node is deleted, if it returns false or returns a Promise and is rejected, the deletion will be stopped.",
      "description_zh": "删除节点的装置钩子函数，若返回 false 或者返回 Promise 且被 reject，则停止删除。 "
    },
    "draggable": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether to enable node dragging",
      "description_zh": "是否开启节点拖拽"
    },
    "edit-disabled-keys": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "The list of node key values that are forbidden to be edited can also be set by the setEditDisabledKeys method",
      "description_zh": "禁止编辑的节点 key 值列表，也可通过 setEditDisabledKeys 方法设置"
    },
    "empty-text": {
      "default": "--",
      "value": "",
      "type": "string",
      "description": "The text that is displayed when the content is empty",
      "description_zh": "内容为空的时候展示的文本"
    },
    "expand-icon": {
      "default": "--",
      "value": "",
      "type": "Component",
      "description": "Indicates the expanded icon",
      "description_zh": "指示展开的图标"
    },
    "expand-icon-color": {
      "default": "--",
      "value": "",
      "type": "string",
      "description": "Indicates the color of the icon that is expanded",
      "description_zh": "指示展开的图标色"
    },
    "expand-on-click-node": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether or not to expand/collapse the node when clicking on the content",
      "description_zh": "节点在点击内容时,是否展开 / 收起"
    },
    "filter-node-method": {
      "default": "--",
      "value": "",
      "type": "(value, data, node)=>boolean",
      "description": "When filtering a tree node, a method that returns true indicates that the node can be displayed, and a return of false indicates that the node will be hidden",
      "description_zh": "对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏"
    },
    "highlight-current": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether to highlight the currently selected node",
      "description_zh": "是否高亮当前选中节点"
    },
    "icon": {
      "default": "--",
      "value": "",
      "type": "Component",
      "description": "Customize the node icon",
      "description_zh": "自定义节点图标"
    },
    "icon-trigger-click-node": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether the node-click event is triggered when clicking the icon to expand the node",
      "description_zh": "点击图标展开节点时是否触发 node-click 事件"
    },
    ":indent": {
      "default": "18",
      "value": "",
      "type": "number",
      "description": "Horizontal indentation between adjacent nodes, in pixels",
      "description_zh": "相邻级节点间的水平缩进，单位为像素"
    },
    "lazy": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether it is an asynchronous loading mode, and then request data when the node is expanded",
      "description_zh": "是否为异步加载模式，展开节点时再请求数据"
    },
    "load": {
      "default": "--",
      "value": "",
      "type": "(node, resolve)=> void",
      "description": "The method for loading subtree data. After clicking the node, the component starts to call the load method, and only when resolve(data) is called in the load function, it means that the data returned to the subordinate level is successful.",
      "description_zh": "加载子树数据的方法。点击节点后，组件开始调用load方法，只有在load函数内调用resolve(data)，才表示返回下级的数据成功。"
    },
    "node-key": {
      "default": "--",
      "value": "",
      "type": "string",
      "description": "The node uniquely identifies the attribute name",
      "description_zh": "节点唯一标识属性名称"
    },
    "only-check-children": {
      "default": "false",
      "value": "",
      "type": "Boolean",
      "description": "Whether only leaf nodes can be selected",
      "description_zh": "是否只能选中叶子节点"
    },
    ":props": {
      "default": "{children: 'children',label: 'label',disabled: 'disabled',isLeaf: 'isLeaf'}",
      "value": "",
      "type": "object",
      "description": "When a user passes in data in a non-standard format, specify the relationship of the mapped attributes",
      "description_zh": "用户传入非标准格式的数据时，指定映射属性的关系"
    },
    "render-after-expand": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "Whether to render a tree node after its children are first expanded",
      "description_zh": "是否在第一次展开某个树节点后才渲染其子节点"
    },
    "render-content": {
      "default": "--",
      "value": "",
      "type": "(h: Vue.h, { node, data, store }=> VNode",
      "description": "A rendering function for the content area of the tree node",
      "description_zh": "树节点的内容区的渲染函数"
    },
    "show-auxi": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "In tile view mode, whether to display auxiliary information for the node's parent path",
      "description_zh": "平铺视图模式时，是否显示节点的上级路径的辅助信息"
    },
    "show-check-easily": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "In strict mode, when the parent node is selected, the function area of the child node is automatically selected",
      "description_zh": "在严格模式时，是否显示勾选父节点时，自动勾选子节点的功能区域"
    },
    "show-checkbox": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether it is a multi-select mode",
      "description_zh": "是否为多选模式"
    },
    "show-contextmenu": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether to enable the context menu feature",
      "description_zh": "是否启用右键菜单功能"
    },
    "show-line": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether or not to display the connection line",
      "description_zh": "是否显示连接线"
    },
    "show-radio": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether it is in radio mode",
      "description_zh": "是否为单选模式"
    },
    "shrink-icon": {
      "default": "--",
      "value": "",
      "type": "Component",
      "description": "An icon that indicates shrinkage",
      "description_zh": "指示收缩的图标"
    },
    "shrink-icon-color": {
      "default": "--",
      "value": "",
      "type": "string",
      "description": "The color of the icon that indicates the shrinkage",
      "description_zh": "指示收缩的图标色"
    },
    "size": {
      "default": "false",
      "value": "",
      "type": "medium / small",
      "description": "The size of the component",
      "description_zh": "组件的大小"
    },
    "view-type": {
      "default": "tree",
      "value": "",
      "type": "tree / plain",
      "description": "View mode, where tree is a normal view and plain is a tiled view",
      "description_zh": "视图模式,其中tree是普通视图，plain是平铺视图"
    }
  },
  "link": "https://opentiny.design/tiny-vue/zh-CN/smb-theme/components/tree",
  "link_zh": "https://opentiny.design/tiny-vue/zh-CN/smb-theme/components/tree",
  "typeDetail": {},
  "events": [
    {
      "name": "add-node",
      "description": "Add an event for a node",
      "description_zh": "添加节点的事件",
      "params": "(node)=>void",
      "value": ""
    },
    {
      "name": "check",
      "description": "Event parameters after selecting a node: {data: currently selected node information, currentChecked: current selected status information of the tree component}",
      "description_zh": "勾选节点后的事件参数说明：{data:  当前选中节点信息, currentChecked: 树组件目前的选中状态信息}",
      "params": "(data, currentChecked)=>void",
      "value": ""
    },
    {
      "name": "check-change",
      "description": "Callback when the selected state of the node changes; Parameter description: {data: node status information, checked: check status of the currently clicked node, indeterminate: semi-selected status of the current node}",
      "description_zh": "节点选中状态发生变化时的回调;参数说明：{data: 节点状态信息,checked:当前点击节点的勾选状态,indeterminate:当前节点的半选状态}",
      "params": "(data, checked, indeterminate)=>void",
      "value": ""
    },
    {
      "name": "check-plain",
      "description": "In tiling mode, if you select or uncheck the node event, you need to set show-checkbox to true for it to take effect. Parameter description: { plainNode: the data of the node clicked, value: whether the checkbox is selected, the value can be true or false}",
      "description_zh": "平铺模式下，勾选或取消勾选节点的事件，需要设置show-checkbox为true才生效。参数说明：{ plainNode: 被点击的节点数据, value: 复选框是否选中，取值true或false }",
      "params": "(plainNode, value)=>void",
      "value": ""
    },
    {
      "name": "close-edit",
      "description": "Turn off the edited event",
      "description_zh": "关闭编辑的事件",
      "params": "()=>void",
      "value": ""
    },
    {
      "name": "current-change",
      "description": "The event triggered when the currently selected node changes; Parameter description: {data: node data, currentNode: node status information (including data)}",
      "description_zh": "当前选中节点变化时触发的事件;参数说明：{data: 节点数据,currentNode: 节点状态信息（包括数据）}",
      "params": "(data, currentNode)=>void",
      "value": ""
    },
    {
      "name": "delete-node",
      "description": "Delete the event for the node",
      "description_zh": "删除节点的事件",
      "params": "(node)=>void",
      "value": ""
    },
    {
      "name": "edit-node",
      "description": "Modify the event of a node",
      "description_zh": "修改节点的事件",
      "params": "(node)=>void",
      "value": ""
    },
    {
      "name": "leave-plain-view",
      "description": "In tile mode, click the node positioning icon to trigger the event. Parameter description: { plainNode: clicked node data, event: native click event }",
      "description_zh": "平铺模式下，点击节点定位图标触发的事件。参数说明：{ plainNode: 被点击的节点数据, event: 原生点击事件 }",
      "params": "(plainNode, event)=>void",
      "value": ""
    },
    {
      "name": "load-data",
      "description": "When lazy loading, the event that the data is loaded successfully; Parameter description: {data: loaded data}",
      "description_zh": "懒加载时，加载数据成功的事件;参数说明：{data: 加载的数据}",
      "params": "(data)=>void",
      "value": ""
    },
    {
      "name": "node-click",
      "description": "The event after clicking on the node. Parameter description: {data: node data, node: node status information (including data), vm: component instance}",
      "description_zh": "点击节点后的事件。 参数说明：{data: 节点数据,node: 节点状态信息（包括数据）,vm: 组件实例}",
      "params": "(data, node, vm)=>void",
      "value": ""
    },
    {
      "name": "node-collapse",
      "description": "Event parameters after node shrinking: {data: node data, node: node status information (including data), vm: current component instance}",
      "description_zh": "收缩节点后的事件参数说明：{data: 节点数据,node: 节点状态信息（包括数据）,vm: 当前组件实例}",
      "params": "(data, node, vm)=>void",
      "value": ""
    },
    {
      "name": "node-contextmenu",
      "description": "This event is triggered when a node is right-clicked; Parameter description: {event: native event, data: node data, node: node status information (including data), vm: component instance}",
      "description_zh": "当某一节点被鼠标右键点击时会触发该事件;参数说明：{event:原生事件,data: 节点数据,node: 节点状态信息（包括数据）,vm: 组件实例}",
      "params": "(event, data, node, vm)=>void",
      "value": ""
    },
    {
      "name": "node-drag-end",
      "description": "拖拽结束时（可能未成功）触发的事件; 参数说明：{srcNode: 拖拽节点,targetNode: 目标节点,dropType: 拖拽类型, (before/after/inner/none),event: 原生事件}",
      "description_zh": "拖拽结束时（可能未成功）触发的事件;参数说明：{srcNode: 拖拽节点,targetNode: 目标节点,dropType: 拖拽类型, (before/after/inner/none),event: 原生事件}",
      "params": "(srcNode, targetNode, dropType, event)=>void",
      "value": ""
    },
    {
      "name": "node-drag-enter",
      "description": "Events triggered when dragging into other nodes; Parameter description: {srcNode: drag node, targetNode: target node, event: native event}",
      "description_zh": "拖拽进入其他节点时触发的事件;参数说明：{srcNode: 拖拽节点,targetNode: 目标节点,event: 原生事件}",
      "params": "(srcNode, targetNode, event)=>void",
      "value": ""
    },
    {
      "name": "node-drag-leave",
      "description": "An event that is triggered when a node is dragged away; Parameter description: {srcNode: drag node, targetNode: target node, event: native event}",
      "description_zh": "拖拽离开某个节点时触发的事件;参数说明：{srcNode: 拖拽节点,targetNode: 目标节点,event: 原生事件}",
      "params": "(srcNode, targetNode, event)=>void",
      "value": ""
    },
    {
      "name": "node-drag-over",
      "description": "events that are triggered when a node is dragged and dropped; Parameter description: {srcNode: drag node, targetNode: target node, event: native event}",
      "description_zh": "在拖拽节点时触发的事件;参数说明：{srcNode: 拖拽节点,targetNode: 目标节点,event: 原生事件}",
      "params": "(srcNode, targetNode, event)=>void",
      "value": ""
    },
    {
      "name": "node-drag-start",
      "description": "The event that is triggered when a node starts dragging; Parameter description: {node: drag node, event: native event}",
      "description_zh": "节点开始拖拽时触发的事件;参数说明：{node: 拖拽节点，event: 原生事件}",
      "params": "(node, event)=>void",
      "value": ""
    },
    {
      "name": "node-drop",
      "description": "拖拽成功完成时触发的事件; 参数说明：{srcNode: 拖拽节点,targetNode: 目标节点,dropType: 拖拽类型, (before/after/inner/none),event: 原生事件}",
      "description_zh": "拖拽成功完成时触发的事件;参数说明：{srcNode: 拖拽节点,targetNode: 目标节点,dropType: 拖拽类型, (before/after/inner/none),event: 原生事件}",
      "params": "(srcNode, targetNode, dropType, event)=>void",
      "value": ""
    },
    {
      "name": "node-expand",
      "description": "Events after the node is expanded. Parameter description: {data: node data, node: node status information (including data, vm: current component instance}",
      "description_zh": "展开节点后的事件。参数说明：{data: 节点数据,node: 节点状态信息（包括数据,vm: 当前组件实例}",
      "params": "(data, node, vm)=>void",
      "value": ""
    },
    {
      "name": "open-edit",
      "description": "Enter the edited event",
      "description_zh": "进入编辑的事件",
      "params": "()=>void",
      "value": ""
    },
    {
      "name": "save-edit",
      "description": "Save the edited event",
      "description_zh": "保存编辑的事件",
      "params": "(changedData, finalData)=>void",
      "value": ""
    }
  ],
  "methods": [
    {
      "name": "addNode",
      "description": "In the specified node object, add a child node",
      "params": "(node:object) => void",
      "description_zh": "在指定的节点对象中，添加一个子节点",
      "value": ""
    },
    {
      "name": "append",
      "description": "Appends a child node to a node, and it is on top of the other child nodes. The target node in the parameter can be the node data or the key of the node",
      "params": "(newData:object, targetNodeOrTargetKey: object | string) => void",
      "description_zh": "为一个节点追加一个子节点，且位于其它子节点的最上方。参数中的目标节点可以是节点数据或节点的key",
      "value": ""
    },
    {
      "name": "closeEdit",
      "description": "The component exits the edit state",
      "params": "() => void",
      "description_zh": "组件退出编辑状态",
      "value": ""
    },
    {
      "name": "closeMenu",
      "description": "Close the node's custom menu",
      "params": "() => void",
      "description_zh": "关闭节点的自定义菜单",
      "value": ""
    },
    {
      "name": "editNode",
      "description": "Puts the specified node object into the edit state",
      "params": "(node:object) => void",
      "description_zh": "让指定的节点对象进入编辑状态",
      "value": ""
    },
    {
      "name": "expandAllNodes",
      "description": "Expand or collapse all nodes",
      "params": "(isExpand:boolean) => void",
      "description_zh": "展开或收起全部节点",
      "value": ""
    },
    {
      "name": "filter",
      "description": "Triggers the tree node to perform the filtering operation",
      "params": "(value:string) => void",
      "description_zh": "触发树节点进行筛选操作",
      "value": ""
    },
    {
      "name": "getCheckedKeys",
      "description": "Returns an array of keys for the currently selected nodes. When the parameter leafOnly is true, only the selected leaf nodes are returned.",
      "params": "(leafOnly:boolean) => string[]",
      "description_zh": "返回目前被选中的节点的 key 所组成的数组。当参数：leafOnly 为true时，只返回被选中的叶子节点。",
      "value": ""
    },
    {
      "name": "getCheckedNodes",
      "description": "Returns an array of currently selected nodes.",
      "params": "(leafOnly:boolean, includeHalfChecked:boolean) => object[]",
      "description_zh": "返回目前被选中的节点所组成的数组。",
      "value": ""
    },
    {
      "name": "getCurrentKey",
      "description": "Gets the key of the currently selected node",
      "params": "() => string",
      "description_zh": "获取当前被选中节点的 key",
      "value": ""
    },
    {
      "name": "getCurrentNode",
      "description": "Gets the data of the currently selected node, and returns null if no node is selected",
      "params": "() => data",
      "description_zh": "获得当前的选中的节点数据，若没有节点被选中则返回 null",
      "value": ""
    },
    {
      "name": "getHalfCheckedKeys",
      "description": "Returns an array of keys of the currently semi-selected nodes",
      "params": "() => result",
      "description_zh": "返回目前半选中的节点的 key 所组成的数组",
      "value": ""
    },
    {
      "name": "getHalfCheckedNodes",
      "description": "Returns an array of nodes that are currently half-selected",
      "params": "() => object[]",
      "description_zh": "返回目前半选中的节点所组成的数组",
      "value": ""
    },
    {
      "name": "getNode",
      "description": "Use \"node data\" or \"node key\" to obtain the node object in the tree component",
      "params": "(data: string | object) => node",
      "description_zh": "通过 \"节点数据\" 或者 \"节点的key\", 获得 Tree 组件中的 node 节点对象",
      "value": ""
    },
    {
      "name": "getNodeKey",
      "description": "Query the internal unique ID of a node object",
      "params": "(node:object) => number",
      "description_zh": "查询节点对象的内部唯一id",
      "value": ""
    },
    {
      "name": "getNodePath",
      "description": "An array of node data is returned by the ID of the node, which is used to return the entire path",
      "params": "(key:string) => object[]",
      "description_zh": "通过节点的id, 返回整个路径上节点数据的数组",
      "value": ""
    },
    {
      "name": "insertAfter",
      "description": "Add a node after a node",
      "params": "(newData:object, targetNodeOrTargetKey: object | string) => void",
      "description_zh": "在一个节点的后面增加一个节点",
      "value": ""
    },
    {
      "name": "insertBefore",
      "description": "Add a node in front of a node",
      "params": "(newData:object, targetNodeOrTargetKey: object | string) => void",
      "description_zh": "在一个节点的前面增加一个节点",
      "value": ""
    },
    {
      "name": "openEdit",
      "description": "The component enters the edit state",
      "params": "() => void",
      "description_zh": "组件进入编辑状态",
      "value": ""
    },
    {
      "name": "remove",
      "description": "Delete the node. When isSaveChildNode is true, the child elements of the current node are moved up to the parent node where the node was deleted.",
      "params": "(targetNodeOrTargetKey: object | string, isSaveChildNode :boolean ) => void",
      "description_zh": "删除节点。当参数：isSaveChildNode为true时，当前节点的子元素上移至删除节点的父节点中去。",
      "value": ""
    },
    {
      "name": "saveEdit",
      "description": "Returns the value of the component's edit status",
      "params": "() => object[]",
      "description_zh": "返回组件编辑状态的值",
      "value": ""
    },
    {
      "name": "saveNode",
      "description": "The node that is being edited saves and exits the editing state",
      "params": "() => void",
      "description_zh": "正在进行编辑的节点保存并退出编辑状态",
      "value": ""
    },
    {
      "name": "setAddDisabledKeys",
      "description": "Set the list of node key values that are not allowed to be added",
      "params": "(keys: string[]) => void",
      "description_zh": "设置禁止添加的节点 key 值列表",
      "value": ""
    },
    {
      "name": "setChecked",
      "description": "Set the check status of the node or the key of the node",
      "params": "( nodeOrKey: object|string,checked:boolean,deep:boolean) => void",
      "description_zh": "通过节点或节点的key,设置它的勾选状态",
      "value": ""
    },
    {
      "name": "setCheckedByNodeKey",
      "description": "By using the key of the node, set it to check or not check",
      "params": "(key:string, checked:boolean) => void",
      "description_zh": "通过节点的key, 设置它为勾选或不勾选",
      "value": ""
    },
    {
      "name": "setCheckedKeys",
      "description": "Use the key of the node to set a group of nodes to the selected state",
      "params": "(keys:string[], leafOnly:boolean) => void",
      "description_zh": "通过节点的key,设置一组节点为勾选状态",
      "value": ""
    },
    {
      "name": "setCheckedNodes",
      "description": "Based on the node data, set a group of nodes to the check state",
      "params": "( nodeArr: object[], leafOnly:boolean) => void",
      "description_zh": "通过节点数据，设置一组节点为勾选状态",
      "value": ""
    },
    {
      "name": "setCurrentKey",
      "description": "Use the key to set the current selected state of a node",
      "params": "(key:string) => void",
      "description_zh": "通过 key 设置某个节点的当前选中状态",
      "value": ""
    },
    {
      "name": "setCurrentNode",
      "description": "Use the node data to set the current selected state of a node",
      "params": "(data:object) => void",
      "description_zh": "通过节点数据， 设置某个节点的当前选中状态",
      "value": ""
    },
    {
      "name": "setCurrentRadio",
      "description": "In single-select mode, the first item to set default-checked-keys for a component instance is the checkmark value",
      "params": "() => void",
      "description_zh": "在单选模式下，设置组件实例的default-checked-keys 的第一项为勾选值",
      "value": ""
    },
    {
      "name": "setDeleteDisabledKeys",
      "description": "Set a list of node key values that are not allowed to be deleted",
      "params": "(keys: string[]) => void",
      "description_zh": "设置禁止删除的节点 key 值列表",
      "value": ""
    },
    {
      "name": "setEditDisabledKeys",
      "description": "Set a list of node key values that are prohibited from editing",
      "params": "(keys: string[]) => void",
      "description_zh": "设置禁止编辑的节点 key 值列表",
      "value": ""
    },
    {
      "name": "updateKeyChildren",
      "description": "Updates all child elements of the specified node",
      "params": "(key, children: object[]) => void",
      "description_zh": "更新指定节点的所有子元素",
      "value": ""
    }
  ],
  "slots": [
    {
      "name": "contextmenu",
      "description": "Customize the context menu content of the tree node, the slot context data is { node }",
      "description_zh": "自定义树节点的右键菜单内容，插槽上下文数据为 { node }"
    },
    {
      "name": "default",
      "description": "Customize the contents of the tree node, the slot context data is { node, data }",
      "description_zh": "自定义树节点的内容，插槽上下文数据为 { node, data }"
    },
    {
      "name": "empty",
      "description": "Customize the elements of empty data",
      "description_zh": "自定义空数据的元素"
    },
    {
      "name": "operation",
      "description": "Right-aligned element with node content and slot context data is { node }",
      "description_zh": "节点内容靠右对齐的元素，插槽上下文数据为 { node }"
    },
    {
      "name": "prefix",
      "description": "Node content prepend element, slot context data is { node }",
      "description_zh": "节点内容前置元素，插槽上下文数据为 { node }"
    },
    {
      "name": "suffix",
      "description": "Node content post-element, slot context data is { node }",
      "description_zh": "节点内容后置元素，插槽上下文数据为 { node }"
    },
    {
      "name": "switch-text",
      "description": "When the function of automatically selecting sub-nodes is displayed in strict mode, customize the content on the right side of the switch",
      "description_zh": "在严格模式显示自动勾选子节点的功能时，自定义开关右侧的内容"
    }
  ],
  "filename": "Tree",
  "description": "可进行展示有父子层级的数据，支持选择，懒加载，拖拽和编辑节点等功能。",
  "description_zh": "可进行展示有父子层级的数据，支持选择，懒加载，拖拽和编辑节点等功能。"
}
