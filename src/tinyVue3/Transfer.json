{
  "name": "TinyTransfer",
  "tag": "穿梭框",
  "props": {
    "button-texts": {
      "default": "[]",
      "value": "",
      "type": "string[]",
      "description": "By passing in an array of strings with 2 values, you can customize the text of the left and right shuttle buttons",
      "description_zh": "通过传入一个2值的字符串数组，自定义左右穿梭按钮的文案"
    },
    "columns": {
      "default": "--",
      "value": "",
      "type": "IColumnConfig",
      "description": "When the render type is table, set the column configuration for the shuttle box table",
      "description_zh": "在渲染类型为 table 时，设置穿梭框表格的列配置"
    },
    ":data": {
      "default": "[]",
      "value": "",
      "type": "ITransferData[]",
      "description": "Full data sources in the left and right lists",
      "description_zh": "左右列表的全量数据源",
      "required": true
    },
    "drop-config": {
      "default": "--",
      "value": "",
      "type": "IDropConfig",
      "description": "For details about how to set the draggable parameters of the shuttle box list items, see sortablejs plug-in",
      "description_zh": "设置穿梭框列表项可拖拽的参数，参见sortablejs插件"
    },
    "filter-method": {
      "default": "--",
      "value": "",
      "type": "(query:string, item:object) => boolean",
      "description": "Set the search filter function of the shuttle box, which is only valid when the default list and nested tables are used\n              When nesting a tree, use treeConfig for search configuration",
      "description_zh": "\n              设置穿梭框的搜索过滤函数，仅在默认列表和嵌套表时有效\n              嵌套树时，请使用treeConfig进行搜索配置\n            "
    },
    "filter-placeholder": {
      "default": "--",
      "value": "",
      "type": "string",
      "description": "When search is enabled, the search box occupies placeholder text",
      "description_zh": "启用搜索时，搜索框占位文本"
    },
    "filterable": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether or not to enable the ability to search",
      "description_zh": "是否启用搜索的功能"
    },
    ":format": {
      "default": "{ noChecked:'${checked}/${total}', hasChecked: '${checked}/${total}' }",
      "value": "",
      "type": "object",
      "description": "Check the status text at the top of the list",
      "description_zh": "列表顶部勾选状态文案"
    },
    "left-columns": {
      "default": "--",
      "value": "",
      "type": "IColumnConfig",
      "description": "When the rendering type is table, the columns in the left table take precedence over columns",
      "description_zh": "在渲染类型为 table 时，左边表格的列配置,优先级高于 columns"
    },
    "left-default-checked": {
      "default": "[]",
      "value": "",
      "type": "string[]",
      "description": "The default left list is an array of keys with ticked options",
      "description_zh": "默认左侧列表的已勾选项的 key 数组"
    },
    "pager-op": {
      "default": "{ mode: 'fixed',pageVO: {currentPage: 1,pageSize: 10}",
      "value": "",
      "type": "IPagerOp",
      "description": "When the render type is table, set the pagination configuration for the table",
      "description_zh": "在渲染类型为 table 时，设置表格的分页配置"
    },
    "props": {
      "default": "--",
      "value": "",
      "type": "{key:string, label:string, disabled:string}",
      "description": "Field alias mapping configuration for the data source",
      "description_zh": "数据源的字段别名映射配置"
    },
    "render": {
      "default": "--",
      "value": "",
      "type": "Table | Tree",
      "description": "To set the rendering type for the left and right areas, the Table and Tree objects need to import the corresponding component variables from the component package. When the plugin value of this property value is set to Table, it is set to render as a table. The value of the property of the plugin is set to Tree, rendered as a tree",
      "description_zh": "设置左右区域的渲染类型,Table 和 Tree 对象需要从组件包中引入相应的组件变量。该属性值的plugin设置为Table时设置渲染为表格;该属性值的 plugin 设置为Tree渲染为树"
    },
    "render-content": {
      "default": "--",
      "value": "",
      "type": "(h: Vue.h, item: any) => vnode",
      "description": "Custom rendering functions for data items",
      "description_zh": "数据项的自定义渲染函数"
    },
    "right-columns": {
      "default": "--",
      "value": "",
      "type": "IColumnConfig",
      "description": "When the rendering type is table, the columns on the right table take precedence over columns",
      "description_zh": "在渲染类型为 table 时，右边表格的列配置,优先级高于 columns"
    },
    "right-default-checked": {
      "default": "[]",
      "value": "",
      "type": "string[]",
      "description": "The default array of keys with checks on the right side of the list",
      "description_zh": "默认右侧列表的已勾选项的 key 数组"
    },
    "show-all-btn": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether or not to display the Move All button",
      "description_zh": "是否显示全部移动按钮"
    },
    "show-pager": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "When the render type is table, set whether the table displays pagination",
      "description_zh": "在渲染类型为 table 时，设置表格是否显示分页"
    },
    "target-order": {
      "default": "\"original\"",
      "value": "",
      "type": "\"original\" / \"push\" / \"unshift\"",
      "description": "Insertion sort strategy for the list element on the right\n If it is original, it is in the same order as the data source \n If it is push, the new element will be added last \n If it is unshift, the new element will be added first.",
      "description_zh": " 右侧列表元素的插入排序策略\n 若为 original，则保持与数据源相同的顺序 \n 若为 push，则新加入的元素排在最后 \n 若为 unshift，则新加入的元素排在最前。"
    },
    "titles": {
      "default": "[]",
      "value": "",
      "type": "string[]",
      "description": "Customize the title of the list; When titles are not set, the titles of the left and right lists are displayed by default: List 1, List 2",
      "description_zh": "自定义列表的标题；不设置titles时，左右列表的标题默认显示为：  列表 1， 列表 2"
    },
    "to-left-disable": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "If the component is not selected in the initialization state, the default button is disabled",
      "description_zh": "组件初始化状态下未选中时，默认按钮显示禁用状态"
    },
    "to-right-disable": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "description": "If the component is not selected in the initialization state, the default button is disabled",
      "description_zh": "组件初始化状态下未选中时，默认按钮显示禁用状态"
    },
    "tree-op": {
      "default": "--",
      "value": "",
      "type": "Tree props",
      "description": "When the render type is tree, set the relevant configuration properties for the tree",
      "description_zh": "在渲染类型为 tree 时，设置树的相关配置属性"
    },
    "v-model": {
      "default": "[]",
      "value": "",
      "type": "string[]",
      "description": "Move the value of the key of the data item to the right list",
      "description_zh": "移动到右列表的数据项的key的数组值",
      "required": true
    }
  },
  "link": "https://opentiny.design/tiny-vue/zh-CN/smb-theme/components/transfer",
  "link_zh": "https://opentiny.design/tiny-vue/zh-CN/smb-theme/components/transfer",
  "typeDetail": {
    "ITransferData": "interface ITransferData {\n  key: string,\n  label: string,\n  disabled: string,\n  [other:string]: any\n}",
    "IDropConfig": "interface IDropConfig {\n  plugin: object // 指定拖放排序的插件Sortable, 该变量通过 import Sortable from 'sortablejs' 导入\n}",
    "IPagerOp": "interface IPagerOp {\n  mode: string  // 通过 mode 设置分页组件组件渲染模式，不同模式是组件内置的 layout 设置， mode 优先级高于 layout\n  pagerCount:number  // 总页数\n  pageVo:{\n    currentPage: number\n    pageSize: number\n    pageSizes: number[]\n    layout: string   // 分页组件布局默认值：'total, prev, pager, next, jumper, sizes'\n  }\n}"
  },
  "events": [
    {
      "name": "change",
      "description": "The event that is triggered when the list element changes on the right;                value: The list of data values on the right side of the shuttle box move: The direction in which the data is moving, whether it is left or right keyArray: The list of data values that are being moved",
      "description_zh": "右侧列表元素变化时触发的事件;                value: 穿梭框右侧数据值列表                move: 数据移动方向，是left或者right                keyArray: 被移动的数据值列表",
      "params": "(value:string[], move:string, keyArray:string[])=>void",
      "value": ""
    },
    {
      "name": "left-check-change",
      "description": "The event that is triggered when the list element on the left is selected;              checked: List of selected data values on the left side of the checkoff box statusChanged: The list of data values whose status has changed on the left side of the check-in box",
      "description_zh": "左侧列表元素选择时触发的事件;              checked: 穿梭框左侧被选中的数据值列表              statusChanged: 穿梭框左侧选中状态发生变化的数据值列表",
      "params": "(checked:string[], statusChanged:string[]) => void",
      "value": ""
    },
    {
      "name": "right-check-change",
      "description": "The event that is triggered when the list element on the right is selected;              checked: List of selected data values on the right side of the shuttle box statusChanged: The list of selected data values whose status has changed on the right side of the shuttle box",
      "description_zh": "右侧列表元素选择时触发的事件;              checked: 穿梭框右侧被选中的数据值列表              statusChanged: 穿梭框右侧选中状态发生变化的数据值列表",
      "params": "(checked:string[], statusChanged:string[]) => void",
      "value": ""
    }
  ],
  "methods": [
    {
      "name": "clearQuery",
      "description": "When the filter function is enabled, clear the search keywords in the left and right panels",
      "params": "(name: string) => void",
      "description_zh": "开启过滤功能时，清空左右面板的搜索关键词",
      "value": ""
    }
  ],
  "slots": [
    {
      "name": "button-panel",
      "description": "Shuttle button slots",
      "description_zh": "穿梭按钮插槽"
    },
    {
      "name": "default",
      "description": "The content slot of the data item, the slot data context is: { option }",
      "description_zh": "数据项的内容插槽，插槽数据上下文为： { option }"
    },
    {
      "name": "left-footer",
      "description": "Content slots at the bottom of the list on the left",
      "description_zh": "左侧列表底部的内容插槽"
    },
    {
      "name": "left-panel",
      "description": "Custom content slot on the left",
      "description_zh": "左侧自定义内容插槽"
    },
    {
      "name": "right-footer",
      "description": "Content slots at the bottom of the list on the right",
      "description_zh": "右侧列表底部的内容插槽"
    },
    {
      "name": "right-panel",
      "description": "Custom content slot on the right",
      "description_zh": "右侧自定义内容插槽"
    }
  ],
  "filename": "Transfer",
  "description": "穿梭框，实现左右表格数据的双向交换的组件。",
  "description_zh": "穿梭框，实现左右表格数据的双向交换的组件。"
}
